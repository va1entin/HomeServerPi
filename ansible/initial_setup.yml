---
- name: Initial setup of raspberry pi
  hosts: "pis"
  vars:
    user_name: val
    #new_user_groups: [sudo, adm]
    initial_packages: [ssl-cert, screen, python3, vim, git, unattended-upgrades, locate, ntp, ntpdate, python3-pip, yamllint, file, rclone, jq, curl, podman]
  vars_files:
    - secrets.yml
  tasks:
# Write image to SD using rpi-imager from bookworm onwards because wpa_supplicant is not working anymore
## Write image to SD card (buster and older)
## sudo dd bs=4M if=2020-08-20-raspios-buster-armhf.img of=/dev/sdX conv=fsync
# Add ssh key to user created with userconf file during initial boot
# ssh-copy-id -i ~/.ssh/id_rsa.pub user@host
    # not required anymore with bullseye+ and rpi imager setup
    # - name: Add user to groups
    #   ansible.builtin.user:
    #     name: "{{ user_name }}"
    #     groups: "{{ new_user_groups }}"
    #     state: present

    - name: Update apt cache and upgrade all packages, no dist upgrade
      ansible.builtin.apt:
        name: "*"
        update_cache: true
        force_apt_get: true
        state: latest

    - name: Install initial packages
      ansible.builtin.apt:
        name: "{{ initial_packages }}"
        force_apt_get: true
        state: latest

    - name: Add unattended-upgrades config
      ansible.builtin.copy:
        src: ../configs/unattended-upgrades/50unattended-upgrades
        dest: /etc/apt/apt.conf.d/50unattended-upgrades

    - name: Add vimrc
      ansible.builtin.copy:
        src: ../configs/vim/vimrc
        dest: /etc/vim/vimrc

    # ansible-galaxy collection install community.general
    # not required anymore with rpi imager setup
    # - name: Set timezone to Europe/Berlin
    #   community.general.timezone:
    #     name: Europe/Berlin

    - name: Enable systemd linger via loginctl
      ansible.builtin.shell:
        cmd: "loginctl enable-linger {{ user_name }}"

    - name: Perform systemd daemon-reload
      ansible.builtin.systemd_service:
        daemon_reload: true
      become: yes

    - name: Enable podman-restart systemd service
      ansible.builtin.systemd_service:
        name: podman-restart
        enabled: true
        scope: user
        state: started

    - name: Add cron job - container system prune
      ansible.builtin.cron:
        name: "Container system prune"
        cron_file: "container_system_prune"
        user: "{{ user_name }}"
        minute: "0"
        hour: "4"
        job: 'podman system prune -a -f --volumes'

    - name: Add cron job - reboot on lost internet connection
      cron:
        name: "Reboot on lost internet connection"
        cron_file: "reboot_on_lost_internet_connection"
        user: "root"
        minute: "*/30"
        job: 'ping -c4 google.com || shutdown -r now'

    # - name: Reboot
    #  ansible.builtin.reboot:
