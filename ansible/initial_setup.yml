---
- name: Initial setup of raspberry pi
  hosts: "cluster"
  vars:
    new_user_name: val
    new_user_groups: [sudo, adm]
    initial_packages: [ssl-cert, screen, python3, vim, git, unattended-upgrades, locate, ntp, ntpdate]
  vars_files:
    - secrets.yml
  tasks:
# Write image to SD card
# sudo dd bs=4M if=2020-08-20-raspios-buster-armhf.img of=/dev/sdX conv=fsync
# Add ssh key to default user, password is raspberry
# ssh-copy-id -i ~/.ssh/id_rsa.pub pi@host
    - name: Add user
      ansible.builtin.user:
        name: "{{ new_user_name }}"
        groups: "{{ new_user_groups }}"
        password: "{{ vault_initial_setup_new_user_password }}"
        state: present

    - name: Copy ssh ID to new user
      ansible.posix.authorized_key:
        user: "{{ new_user_name }}"
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        state: present

    - name: Update apt cache and upgrade all packages, no dist upgrade
      ansible.builtin.apt:
        name: "*"
        update_cache: true
        force_apt_get: true
        state: latest

    - name: Install initial packages
      ansible.builtin.apt:
        name: "{{ initial_packages }}"
        force_apt_get: true
        state: latest

    - name: Add unattended-upgrades config
      ansible.builtin.copy:
        src: ../configs/unattended-upgrades/50unattended-upgrades
        dest: /etc/apt/apt.conf.d/50unattended-upgrades

    # - name: Add sshd config
    #   ansible.builtin.copy:
    #     src: ../configs/sshd/sshd_config
    #     dest: /etc/ssh/sshd_config

    - name: Add sshd config 99deny_pi.conf
      ansible.builtin.copy:
        src: ../configs/sshd/99deny_pi.conf
        dest: /etc/ssh/sshd_config.d/99deny_pi.conf

    - name: Add vimrc
      ansible.builtin.copy:
        src: ../configs/vim/vimrc
        dest: /etc/vim/vimrc

    - name: Change pi's default password
      ansible.builtin.user:
        name: pi
        password: "{{ vault_initial_setup_new_pi_password }}"
        state: present

    - name: Add cron job - reboot on lost internet connection
      cron:
        name: "Reboot on lost internet connection"
        cron_file: "reboot_on_lost_internet_connection"
        user: "root"
        minute: "*/30"
        job: 'ping -c4 google.com || shutdown -r now'

    # - name: Reboot
    #  ansible.builtin.reboot:
