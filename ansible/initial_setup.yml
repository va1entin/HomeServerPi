---
- name: Initial setup of raspberry pi
  hosts: "pis"
  vars:
    # new_user_groups: [sudo, adm]
    data_mount_point: "/mnt/data"
    initial_packages: [ssl-cert, screen, python3, vim, git, unattended-upgrades, locate, python3-pip, file, rclone, jq, curl, podman] #ntp, yamllint
  tasks:
# Write image to SD using rpi-imager and specify user
# Add ssh key to user
# ssh-copy-id -i ~/.ssh/id_rsa.pub user@host
    # not required anymore with bullseye+ and rpi imager setup
    # - name: Add user to groups
    #   ansible.builtin.user:
    #     name: "{{ user_name }}"
    #     groups: "{{ new_user_groups }}"
    #     state: present

    - name: Update apt cache and upgrade all packages, no dist upgrade
      ansible.builtin.apt:
        name: "*"
        update_cache: true
        force_apt_get: true
        state: latest
      become: yes

    - name: Install initial packages
      ansible.builtin.apt:
        name: "{{ initial_packages }}"
        force_apt_get: true
        state: latest
      become: yes

    - name: Add unattended-upgrades config
      ansible.builtin.copy:
        src: ../configs/unattended-upgrades/50unattended-upgrades
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
      become: yes

    - name: Add vimrc
      ansible.builtin.copy:
        src: ../configs/vim/vimrc
        dest: /etc/vim/vimrc
      become: yes

    - name: Enable systemd linger via loginctl
      ansible.builtin.shell:
        cmd: "loginctl enable-linger {{ ansible_user_id }}"

    - name: Ensure systemd user dir exists
      ansible.builtin.file:
        path: "/home/{{ ansible_user_id }}/.config/systemd/user/"
        state: directory

    - name: Create systemd service unit file for container system prune
      ansible.builtin.template:
        src: ../configs/systemd/services/podman_system_prune.service.j2
        dest: "/home/{{ ansible_user_id }}/.config/systemd/user/podman_system_prune.service"

    - name: Create systemd timer unit file for container system prune
      ansible.builtin.template:
        src: ../configs/systemd/timers/podman_system_prune.timer.j2
        dest: "/home/{{ ansible_user_id }}/.config/systemd/user/podman_system_prune.timer"

    - name: Perform systemd daemon-reload in user scope
      ansible.builtin.systemd_service:
        daemon_reload: true
        scope: user

    - name: Enable and start systemd timer for container system prune
      ansible.builtin.systemd:
        name: podman_system_prune.timer
        enabled: true
        scope: user
        state: started

    - name: Enable podman-restart systemd service
      ansible.builtin.systemd_service:
        name: podman-restart
        enabled: true
        scope: user
        state: started

    - name: Ensure data disk mount point exists
      ansible.builtin.file:
        path: "{{ data_mount_point }}"
        state: directory

    - name: Mount data disk and add to fstab
      ansible.posix.mount:
        path: "{{ data_mount_point }}"
        src: UUID=9d4ed036-0789-40e2-9c27-b1acb503f38d
        fstype: ext4
        opts: defaults,nofail
        passno: 2
        state: mounted
      become: yes

    # - name: Add cron job - reboot on lost internet connection
    #   cron:
    #     name: "Reboot on lost internet connection"
    #     cron_file: "reboot_on_lost_internet_connection"
    #     user: "root"
    #     minute: "*/30"
    #     job: 'ping -c4 google.com || shutdown -r now'
